#딕셔너리(Dictionary)
#쌍 2개가 하나로 묶인 자료구조   ex) apple:사과 처럼 의미 있는 두 값을 연결해 구성함





#1. 딕셔너리 생성
#딕셔너리는 중괄호 {}로 묶어 구성함. 키와 값의 쌍으로 구성되어 있음.
#딕셔너리변수 = {키1:값1, 키2:값2, 키3:값3, ...}
#딕셔너리에는 순서가 없어 생성한 순서대로 구성되어 있을 수도 있고 아닐 수도 있다!
dict1={1:'a', 2:'b', 3:'c'}
print(dict1)
print("%s" % dict1)
#★결과
#{1: 'a', 2: 'b', 3: 'c'}
#{1: 'a', 2: 'b', 3: 'c'}

dict2={'a':1, 'b':2, 'c':3}
print(dict2)
#★결과
#{'a': 1, 'b': 2, 'c': 3}





#2. 학생의 정보를 딕셔너리로 표현
student1={'학번':21812009, '이름':'조은영', '학과':'전자공학과', '연락처':'010-6364-7803'}
print(student1)
print("%s" % student1)
#★결과
#{'학번': 21812009, '이름': '조은영', '학과': '전자공학과', '연락처': '010-6364-7803'}
#{'학번': 21812009, '이름': '조은영', '학과': '전자공학과', '연락처': '010-6364-7803'}





#3. student1에 쌍을 추가
#딕셔너리에는 딕셔너리명[키]=값 형식으로 쌍을 추가할 수 있다!
#쌍을 추가할 때 주의할 점은 이미 존재하는 키를 사용하면 새로운 쌍이 추가되는 것이 아니라 기존값이 변경된다! 딕셔너리의 특성상 키는 유일해야 하기 때문!
student1['수연이 학번']=21811937
student1['수연이 이름']='현수연'
student1['수연이 학과']='전자공학과'
student1['수연이 연락처']='010-7330-4353'
student1['학과']='정보통신공학과'
print(student1)
#★결과
#{'학번': 21812009, '이름': '조은영', '학과': '정보통신공학과', '연락처': '010-6364-7803', '수연이 학번': 21811937, '수연이 이름': '현수연', '수연이 학과': '전자공학과', '수연이 연락처': '010-7330-4353'}





#4. 딕셔너리 쌍 삭제하기
#del(딕셔너리명[키])를 이용해 삭제할 수 있음
del(student1['연락처'])
del(student1['수연이 연락처'], student1['학과'])
print(student1)
#★결과
#{'학번': 21812009, '이름': '조은영', '수연이 학번': 21811937, '수연이 이름': '현수연', '수연이 학과': '전자공학과'}




#5. 딕셔너리 키를 이용해 값을 구하기
#딕셔너리명[키]를 사용해서 값을 구할 수 있음
student2={'학번':21812009, '이름':'조은영', '학과':'전자공학과', '연락처':'010-6364-7803'}

print(student2['학번'])
print("%d" % student2['학번'])
print("%s" % student2['학번'])

print(student2['학과'])
print("%s" % student2['학과'])
#★결과
#21812009
#21812009
#21812009
#전자공학과
#전자공학과

#딕셔너리명.get(키) 함수를 사용해서도 접근할 수 있음
print(student2.get('학번'))
print("%s" % student2.get('이름'))
#★결과
#21812009
#조은영

#딕셔너리명[키]와 딕셔너리명.get(키) 함수의 공통점과 차이점
#공통점 : 구한 결과는 같음
#차이점 : 딕셔너리명[키]는 없는 키를 호출하면 오류가 나지만, 딕셔너리명.get(키)는 없는 키를 호출하면 아무것도 반환하지 않음





#6. 딕셔너리를 리스트, 튜플 형태로 구하기
#딕셔너리의 모든 값을 리스트로 만들어 반환 : 딕셔너리명.values()
#딕셔너리의 모든 값을 튜플형태로 만들어 반환 : 딕셔너리명.items()
print(student2.values())
#★결과
#dict_values([21812009, '조은영', '전자공학과', '010-6364-7803'])

#=>출력 결과의 dict_values가 보기 싫으면 list(딕셔너리명.values())함수 사용
print(list(student2.values()))
#★결과
#[21812009, '조은영', '전자공학과', '010-6364-7803']

print(student2.items())
#★결과
#dict_items([('학번', 21812009), ('이름', '조은영'), ('학과', '전자공학과'), ('연락처', '010-6364-7803')])

print(list(student2.items()))
#★결과
#[('학번', 21812009), ('이름', '조은영'), ('학과', '전자공학과'), ('연락처', '010-6364-7803')]

#+추가
#딕셔너리의 모든 키를 반환 : 딕셔너리명.keys()
print(student2.keys())
#★결과
#dict_keys(['학번', '이름', '학과', '연락처'])

print(list(student2.keys()))
#★결과
#['학번', '이름', '학과', '연락처']





#7. 딕셔너리 안에 해당 키가 있는지 없는지 확인
#'키 명' in 딕셔너리명 을 사용해 확인할 수 있음. 키가 있다면 True를 반환, 키가 없다면 False를 반환함

#student2={'학번':21812009, '이름':'조은영', '학과':'전자공학과', '연락처':'010-6364-7803'} 사용
print('학번' in student2)
print("%s" % '학번' in student2)
print('주소' in student2)
#★결과
#True
#True
#False





#8. for문을 활용해 딕셔너리의 모든 값을 출력
singer={}

singer['이름']='EXO'
singer['구성원 수']=7
singer['데뷔']='MAMA'
singer['대표곡']='으르렁'

for j in singer.keys():
    print("%s --> %s" % (j, singer[j]))
#★결과
#이름 --> EXO
#구성원 수 --> 7
#데뷔 --> MAMA
#대표곡 --> 으르렁





#9. 딕셔너리 정렬
#딕셔너리에 순서가 없는 이유 : 키를 사용해 추출하기 때문에 굳이 순서대로 있을 필요가 없음
#그러나, 딕셔너리 전체를 정렬해 추출하고 싶을 때가 있음. 그럴때 사용하기 좋다!
#딕셔너리 정렬 결과는 리스트로 반환되고, 각 쌍들은 튜플로 변경됨.

import operator #operator.itemgetter() 함수를 사용하기 위해  operator를 import

trainDic , trainList1, trainList2 = {}, [], [] #빈 딕셔너리와 리스트를 준비

trainDic={'Xiumin':'시우민', 'Suho':'수호', 'Chanyeol':'찬열', 'D.O.':'디오', 'Baekhyun':'백현', 'Kai':'카이', 'Sehun':'세훈'} #딕셔너리 작성
trainList1=sorted(trainDic.items(), key = operator.itemgetter(0)) #키를 기준으로 딕셔너리를 정렬. 값으로 정렬하려면 매개변수를 operator.itemgetter(1)로 변경하면 된다!

print(trainList1)
#★결과
#[('Baekhyun', '백현'), ('Chanyeol', '찬열'), ('D.O.', '디오'), ('Kai', '카이'), ('Sehun', '세훈'), ('Suho', '수호'), ('Xiumin', '시우민')]
#리스트 안에 튜플로 딕셔너리의 항목이 변경됨을 확인할 수 있음.

trainList2=sorted(trainDic.items(), key = operator.itemgetter(1)) #값을 기준으로 딕셔너리를 정렬.
print(trainList2)
#★결과
#[('D.O.', '디오'), ('Baekhyun', '백현'), ('Sehun', '세훈'), ('Suho', '수호'), ('Xiumin', '시우민'), ('Chanyeol', '찬열'), ('Kai', '카이')]
