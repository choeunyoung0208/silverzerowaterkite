%imadd 명령어를 이용한 두 행렬의 덧셈 연산
%imadd(a, b) : 행렬 a와 행렬 b를 더함. 
%계산할 행렬들은 클래스가 같거나 b가 double형 스칼라여야 계산이 가능함
X=[255 0 75; 44 225 100];
Y=[50 50 50; 50 50 50];
Z=imadd(X, Y);
%결과 : Z=[305, 50, 125; 94, 275, 150]

%위의 두 행렬 덧셈 결과 값이 [0, 255]의 범위를 갖게 하는 방법
%[0, 255]의 값을 가지는 클래스가 uint8형 이므로 행렬을 만들 때 uint8형임을 선언해주면 됩니당
X1= uint8([255 0 75; 44 225 100]);
Y1=uint8([50 50 50; 50 50 50]);
Z1=imadd(X1, Y1);
%결과 : Z1=[255, 50, 125; 94, 255, 150]

%imadd를 이용해서도 뺄셈 가능
%그러나 uint8의 클래스를 가질 경우에는 불가능(uint8 값의 범위 자체가 0 또는 양의 값을가지므로)
Y2=[-50 -50 -50; -50 -50 -50];
Z2=imadd(X, Y2);
%결과 : Z2=[205, -50, 25; -6, 175, 50]




%immultiply 명령어를 이용한 두 행렬의 곱셈 연산
%immultiply(a, b) : 행렬 a와 행렬 b를 곱함
%선형대수에서는 두 행렬을 곱할 때 첫번째 행렬의 열과 두번째 행렬의 행이 같을때 곱셈이 가능한데, 
%여기서는 요소끼리 곱셈을 하는것이므로 크기가 같아야 곱셈이 가능
Z5=immultiply(X, Y);
%결과 : Z5=[12750, 0, 3750; 2200, 11250, 5000]
Z6=immultiply(X1, Y1);
%결과 : Z6=[255, 0, 255; 255, 255, 255]




%imsubtract 명령어를 이용한 두 행렬의 뺄셈 연산
%imsubtract(a, b) : 행렬 a와 행렬 b를 뺌
Z7=imsubtract(X, Y);
%결과 : Z7=[205, -50, 25; -6, 175, 50]
Z8=imsubtract(X1, Y1);
%결과 : Z8=[205, 0, 25; 0, 175, 50]

%imsubtract를 이용해서도 덧셈 가능
%그러나 uint8의 클래스를 가질 경우에는 불가능(uint8 값의 범위 자체가 0 또는 양의 값을가지므로)
Z9=imsubtract(X, Y2);
%결과 : Z9=[305, 50, 125; 94, 275, 150]




%imdivide 명령어를 이용한 두 행렬의 나눗셈 연산
%imdivide(a, b) : 행렬 a의 각 요소들을 행렬 b의 각 요소들로 나눔
Z11=imdivide(X, Y);
%결과 : Z11=[5.100000000000000, 0, 1.500000000000000; 0.880000000000000, 4.500000000000000, 2]
Z12=imdivide(X1, Y1);
%결과 : Z12=[5, 0, 2; 1, 5, 2]